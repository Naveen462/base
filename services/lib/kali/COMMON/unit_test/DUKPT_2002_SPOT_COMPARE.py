import sys
from GVRlib import Pinpad, Interface
from binascii import hexlify, unhexlify
from GVRlib import dukpt
from GVRlib import pupyspot

def pininput(c, k):
    Pinpad.send_create_window_from_resource_cmd(c, 1, 240, allign = 0xFF, posX = 0x00, posY = 0x00)
    Pinpad.send_show_window(c, 1)
    Pinpad.send_customer_input_enable_cmd(
        c, 
        min_input=4, 
        max_input=12, 
        autoenter=0, 
        delete_enable=0, 
        timeout=30, 
        beepecho=0, 
        echo_mode=0, 
        win_id=1, 
        tag_id=1, 
        input_mode=1, 
        remember=0, 
        enctype=1, 
        encmode=0, 
        pin_format=0,
        keyid=k, 
        card_data=b'4012345678909'
    )
    ack = Pinpad.recv_customer_input_enable_cmd(c, 30)
    return ack['input_data'], ack['smidr']

def data_enc(c, k, versus, dta):
    Pinpad.send_data_encryption(c, k, versus, dta, 0x00, working_key = b'')
    ack = Pinpad.recv_data_encryption(c, 5)
    if ack['ack_code'] == 0x00:
        return ack['Data']
    return False

def check(label, expected, calculated):
    print(label, end = ": ")
    if expected == calculated:
        print("correct!")
    else:
        print("fail! | expected: " + hexlify(expected).decode('latin 1').upper() + " calculated: " + hexlify(calculated).decode('latin 1').upper())

ipek = unhexlify('6AC292FAA1315B4D858AB3A3D7D5933A')
smid = unhexlify('FFFF9876543210E00000')
pin  = b'1234'
pan  = b'4012345678909'
fpin = unhexlify('041234FFFFFFFFFF')
epin = unhexlify('041274EDCBA9876F')
data = unhexlify('343031323334353637383930394439383700000000000000')

curk = dukpt.DUKPT_Key(len(ipek))
curk.initializeKeys(smid, ipek)
curk.MACLEN = 8

dukpt_2k2_table = [
 #KSN                     KEY GEN                             PIN KEY                             PINBLOCK            MAC REQ KEY                         MAC REQ             MAC RES KEY                         MAC RES             DATA ENC KEY                        DATA ENC
['FFFF9876543210E00001', '042666B49184CFA368DE9628D0397BC9', '042666B49184CF5C68DE9628D0397B36', '1B9C1845EB993A7A', '042666B4918430A368DE9628D03984C9', '9CCC78173FC4FB64', '042666B46E84CFA368DE96282F397BC9', '20364223C1FF00FA', '448D3F076D8304036A55A3D7E0055A78', 'FC0D53B7EA1FDA9EE68AAF2E70D9B9506229BE2AA993F04F'],
['FFFF9876543210E00002', 'C46551CEF9FD24B0AA9AD834130D3BC7', 'C46551CEF9FD244FAA9AD834130D3B38', '10A01C8D02C69107', 'C46551CEF9FDDBB0AA9AD834130DC4C7', 'F608A9BCA6FFC311', 'C46551CE06FD24B0AA9AD834EC0D3BC7', 'D1FCA6BEF05D24D2', 'F1BE73B36135C5C26CF937D50ABBE5AF', 'A2B4E70F846E63D68775B7215EB4563DFD3037244C61CC13'],
['FFFF9876543210E00003', '0DF3D9422ACA56E547676D07AD6BADFA', '0DF3D9422ACA561A47676D07AD6BAD05', '18DC07B94797B466', '0DF3D9422ACAA9E547676D07AD6B52FA', '20B59A4FEAC937E3', '0DF3D942D5CA56E547676D07526BADFA', 'BAD4CC9CC2AE326C', 'EEEEF522C67239E4A2A65FEBF4C511F4', 'BD751E65F10E75B6C1D5B1D283496A36C2DE21D993C387A7'],
['FFFF9876543210E00004', '279C0F6AEED0BE652B2C733E1383AE91', '279C0F6AEED0BE9A2B2C733E1383AE6E', '0BC79509D5645DF7', '279C0F6AEED041652B2C733E13835191', 'C7BFA6CC44161828', '279C0F6A11D0BE652B2C733EEC83AE91', '1EB08AEECE6FF0C2', 'BCF2610997C3AC3C5F13AE965A1B773B', '1118F50947441BBDA3C8C70220021A12EC31CC473F7215F4'],
['FFFF9876543210E00005', '5F8DC6D2C845C125508DDC048093B83F', '5F8DC6D2C845C1DA508DDC048093B8C0', '5BC0AF22AD87B327', '5F8DC6D2C8453E25508DDC048093473F', '0202B96339022058', '5F8DC6D23745C125508DDC047F93B83F', '5CBE3E81D1D2A0FB', 'F3054D8B7471284BDB4EE18AFC3B091B', '9FD7BD1EC28845ACA93367A9DA9317BD555C6B33AE22D365'],
['FFFF9876543210E00006', '5E415CB0BAF9F03CD0C14B63FB62FF43', '5E415CB0BAF9F0C3D0C14B63FB62FFBC', 'A16DF70AE36158D8', '5E415CB0BAF90F3CD0C14B63FB620043', 'CF6C72E6A49892D5', '5E415CB045F9F03CD0C14B630462FF43', 'C60D38E858C936EB', 'BAF444BBC5D02752D6CEC9C51226AF53', 'DC526613AD9095C1CEC60C41B7686ED606AC1AA2F4F54912'],
['FFFF9876543210E00007', '0C8F780B7C8B49D0AE84A9EB2A6CE660', '0C8F780B7C8B492FAE84A9EB2A6CE69F', '27711C16CB257F8E', '0C8F780B7C8BB6D0AE84A9EB2A6C1960', 'B11EB0D97CF167E8', '0C8F780B838B49D0AE84A9EBD56CE660', '053EFD396A0B1333', 'E613858B288B6ACAA7AE454931B21C56', '24700BD6F17751531F2A16CE2AF7731101E6F87839C67244'],
['FFFF9876543210E00008', '27F66D5244FF62E1AA6F6120EDEB4280', '27F66D5244FF621EAA6F6120EDEB427F', '50E55547A5027551', '27F66D5244FF9DE1AA6F6120EDEBBD80', '3679055BCCBE3D6B', '27F66D52BBFF62E1AA6F612012EB4280', '7FACA91D970D9187', 'C39B2778B058AC376FB18DC906F75CBA', '5F6584DEAFC51B48A239B51C2DACA97176C01D9CA8EDC33C'],
['FFFF9876543210E00009', '27E31064FDC565698900E2057F658E7E', '27E31064FDC565968900E2057F658E81', '536CF7F678ACFC8D', '27E31064FDC59A698900E2057F65717E', '26AA23DC169152F8', '27E3106402C565698900E20580658E7E', '37F17B8F302EE3A6', 'BC6612B3A4FAB5B165AC928BBD9DB6F0', '7CB9080923ED4D7D8D1B8A2849331684CC910522023BE537'],
['FFFF9876543210E0000A', '6CF2500A22507C7CC776CEADC1E33014', '6CF2500A22507C83C776CEADC1E330EB', 'EDABBA23221833FE', '6CF2500A2250837CC776CEADC1E3CF14', '1632621C039098CE', '6CF2500ADD507C7CC776CEAD3EE33014', 'CE038CC91CB4CBBE', 'BC9C848366B1F9997656DD8004C5C43B', 'C221F5A8CA5DA909BE04938E0FB8DFCFB30ED0D62B590663'],
['FFFF9876543210E0000B', '3E8260BA04B2D620C01482B3819A18B7', '3E8260BA04B2D6DFC01482B3819A1848', '2328981C57B4BDBA', '3E8260BA04B22920C01482B3819AE7B7', '76D95CB4F6B0D093', '3E8260BAFBB2D620C01482B37E9A18B7', '27C9FA5E14F0A044', '0D790AC0C7E16699F235293F546D29CD', '98A271C13E4AEE80C6343867F2F0F6C55E8B7E5645866A0B'],
['FFFF9876543210E0000C', 'B716E1E11CF53D80726CAEE75C3A624F', 'B716E1E11CF53D7F726CAEE75C3A62B0', '038D03CC926CF286', 'B716E1E11CF5C280726CAEE75C3A9D4F', 'BAD9D84D1C934D3B', 'B716E1E1E3F53D80726CAEE7A33A624F', '6D2ECC6A3CE2A378', 'D57E353ABF3F0CB0B951B5D8820AD741', '273CBE2F275B1C29D53F3C01A24DEC73F92C3BE219FFCB91'],
['FFFF9876543210E0000D', 'E072EDF95340535FB6C581C58FBF2533', 'E072EDF9534053A0B6C581C58FBF25CC', '6C8AA97088B62C68', 'E072EDF95340AC5FB6C581C58FBFDA33', 'AAAFB5983360C89A', 'E072EDF9AC40535FB6C581C570BF2533', '7E40B49274596E49', 'ACAEAA2E23F9900552C2132890CE5390', '7290CB9D6F6E35A9B8A34C590A93696F8FE0137A8558884C'],
['FFFF9876543210E0000E', 'A80046087F5B8F245AAD95E18429084F', 'A80046087F5B8FDB5AAD95E1842908B0', 'F17C9E1D72CD4950', 'A80046087F5B70245AAD95E18429F74F', '4EC79532D8EC0E30', 'A8004608805B8F245AAD95E17B29084F', '552339891A346CA4', 'F42D46659549ED0ADADF6AB332815A7B', '48207931E5F6E5E3E02E7E1D7BED4E3232FCA67E66A31F61'],
['FFFF9876543210E0000F', '93DD5B956C4878472E453AAEFD32A5AA', '93DD5B956C4878B82E453AAEFD32A555', 'B170F6E7F7F2F64A', '93DD5B956C4887472E453AAEFD325AAA', '82500D05251841E7', '93DD5B95934878472E453AAE0232A5AA', 'AFE23CBA2307F7CC', 'F331F347ADD182B7CDC5208F62CA1233', '166246602B1255114A4012513B0DD4A9E19E82C945860C55'],
['FFFF9876543210E00010', '59598DCBD9BD94C094165CE453585F57', '59598DCBD9BD943F94165CE453585FA8', 'D5D9638559EF53D6', '59598DCBD9BD6BC094165CE45358A057', 'D39D3A598549B9CD', '59598DCB26BD94C094165CE4AC585F57', '9E933C88DA838A4F', '82D613B1742B19C55F653616A47DF1A0', '53EDA44BDBCA037B2D3FEAEBAF73499336767BD1D0D09679'],
['FFFF9876543210E00011', '2B5F01F4F0CC05EA639D523231BF1BA2', '2B5F01F4F0CC0515639D523231BF1B5D', 'D544F8CDD292C863', '2B5F01F4F0CCFAEA639D523231BFE4A2', 'F094AF9309CD8A91', '2B5F01F40FCC05EA639D5232CEBF1BA2', '631E7B39C609220B', '5090137BD2EE830588765B84F7DA9F91', '086F3F46238B99AFB35DA42029675EE1FAB1C606307B35FB'],
['FFFF9876543210E00012', '9CF640F279C2AEE615F725EEEAC2CBAF', '9CF640F279C2AE1915F725EEEAC2CB50', '7A21BD10F36DC41D', '9CF640F279C251E615F725EEEAC234AF', 'A819AF04330EB313', '9CF640F286C2AEE615F725EE15C2CBAF', 'E93F5E271A20D156', '91E5A8B18169A9532DF547D6AFE6087C', '270439430E60BFC600FE3DC7E7AD8C72D22D5284EC676EF2'],
['FFFF9876543210E00013', 'C3DF489FDF1153B4F03DE97C27DC4C2F', 'C3DF489FDF11534BF03DE97C27DC4CD0', '78649BD17D0DFA60', 'C3DF489FDF11ACB4F03DE97C27DCB32F', '79285A1733915039', 'C3DF489F201153B4F03DE97CD8DC4C2F', 'FCE7A5A5A7333665', '44893E3434ABDD6A817CE2841825E1FD', '2FEAE132FA0E46B4ABF55A87477AFA907E598868BCC236DA'],
['FFFF9876543210E00014', '658488507721B3F14737FA93F923CBD2', '658488507721B30E4737FA93F923CB2D', '7E7E16EA0C31AD56', '6584885077214CF14737FA93F92334D2', 'E2B2637FC4BB5D0D', '658488508821B3F14737FA930623CBD2', 'A10E94AA46F9FA03', 'E0D4C7B3EA32A8F108A83C1844ED6FD8', 'A16A61328E36A21858B5FBFBE7BAF7985F5C54F5B8C12298'],
['FFFF9876543210E00015', 'E161D1956A61F6D2F37AFD7F9CC3699A', 'E161D1956A61F62DF37AFD7F9CC36965', '72105C22EBC791E6', 'E161D1956A6109D2F37AFD7F9CC3969A', 'B2033EBD58DA8BF1', 'E161D1959561F6D2F37AFD7F63C3699A', 'BDA3AEE182D0FFEA', 'D9AE3E62F5E3CA2C357E37F500D9F314', '42A9342FD5C1ACD20E137950A7368D2BBE884275B7906918'],
]
timeout = 5
c = pupyspot.Dispatcher()

c.connect('172.16.100.10')
#c.connect('192.168.68.176')
Interface.login(c)
kid = 1
Pinpad.send_delete_key(c, kid)
ack = Pinpad.recv_delete_key(c, timeout)
if ack['ack_code'] not in (0x00, 0x32):
    print('Delete key failed: ' + hex(ack['ack_code']))
    sys.exit(1)

kbh = Pinpad.tr31_header(b'B', b'B1', b'T', b'X', b'00', b'E', optional_block = b'0100KS18' + hexlify(smid), keylen = 16)
kba = Pinpad.tr31_kba(unhexlify('CD92E6ADDFE9BA0275E654B31002BF315B850702A8DA493E'), ipek, kbh)
Pinpad.send_application_key_downloadtr31(c, kid, 0x00, kba)
ack = Pinpad.recv_application_key_downloadtr31(c, timeout)
if ack['ack_code'] != 0x00:
    print('Download key failed: ' + hex(ack['ack_code']))
    sys.exit(1)
    
for test in dukpt_2k2_table:
    smid = unhexlify(test[0])
    curk.generateHostKeys(smid, ipek)
    genk = unhexlify(test[1])
    pink = unhexlify(test[2])
    epbe = unhexlify(test[3])
    mrqk = unhexlify(test[4])
    mrqv = unhexlify(test[5])
    mrsk = unhexlify(test[6])
    mrsv = unhexlify(test[7])
    datk = unhexlify(test[8])
    datv = unhexlify(test[9])
    print("*" * 40 + "PYTHON MODULE CHECK" + 40 * "*")
    check('KSN', smid, curk.get_key_serial_nr())
    check('PIN KEY', pink, curk.calculate_variants(curk.VAR_PIN_OFF))
    check('PIN BLOCK', epbe, curk.encrypt(epin))
    check('MAC KEY REQ', mrqk, curk.calculate_variants(curk.VAR_MAC_OFF))
    check('MAC REQ', mrqv, curk.mac_x919_in(data))
    check('MAC KEY RES', mrsk, curk.calculate_variants(curk.VAR_MAC_OUT_OFF))
    check('MAC RES', mrsv, curk.mac_x919_out(data))
    check('DATA KEY', datk, curk.calculate_variants_data_enc(curk.VAR_ENC_REQ))
    check('DATA ENC', datv, curk.tdes_cbc_req(data))
    print("*" * 40 + "SPOT PROTOCOL CHECK" + 40 * "*")
    pinblock, smidc = pininput(c, kid)
    check('KSN', smid, smidc)
    check('PIN BLOCK', epbe, pinblock)
    #check('MAC REQ', mrqv[:4], data_enc(c, kid, 0x0A, data))
    #check('MAC RES', mrsv[:4], data_enc(c, kid, 0x0B, data))
    #check('DATA ENC', datv, data_enc(c, kid, 0x0C, data))
    check('MAC REQ', mrqv[:4], data_enc(c, kid, 0x1A, data))
    check('MAC RES', mrsv[:4], data_enc(c, kid, 0x1B, data))
    check('DATA ENC', datv, data_enc(c, kid, 0x1C, data))
    print("*" * 99)
    curk.derivate_key()
Interface.send_logout_request(c)
c.disconnect()
